// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]

  lastLoginMethod String?

  oauthapplications OauthApplication[]
  oauthaccesstokens OauthAccessToken[]
  oauthconsents     OauthConsent[]
  preferences       UserPreferences?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model OauthApplication {
  id                String             @id
  name              String?
  icon              String?
  metadata          String?
  clientId          String?
  clientSecret      String?
  redirectURLs      String?
  type              String?
  disabled          Boolean?           @default(false)
  userId            String?
  user              User?              @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime?
  updatedAt         DateTime?
  oauthaccesstokens OauthAccessToken[]
  oauthconsents     OauthConsent[]

  @@unique([clientId])
  @@map("oauthApplication")
}

model OauthAccessToken {
  id                    String            @id
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  clientId              String?
  oauthapplication      OauthApplication? @relation(fields: [clientId], references: [clientId], onDelete: Cascade)
  userId                String?
  user                  User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  scopes                String?
  createdAt             DateTime?
  updatedAt             DateTime?

  @@unique([accessToken])
  @@unique([refreshToken])
  @@map("oauthAccessToken")
}

model OauthConsent {
  id               String            @id
  clientId         String?
  oauthapplication OauthApplication? @relation(fields: [clientId], references: [clientId], onDelete: Cascade)
  userId           String?
  user             User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  scopes           String?
  createdAt        DateTime?
  updatedAt        DateTime?
  consentGiven     Boolean?

  @@map("oauthConsent")
}

model RateLimit {
  id          String  @id
  key         String?
  count       Int?
  lastRequest BigInt?

  @@map("rateLimit")
}

model UserPreferences {
  id          String  @id @default(cuid())
  userId      String
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // GitHub preferences
  githubOwner String?
  githubRepo  String?
  githubRepoId Int?
  
  // Other integration preferences can be added here
  // notionWorkspaceId String?
  // slackTeamId String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId])
  @@map("userPreferences")
}