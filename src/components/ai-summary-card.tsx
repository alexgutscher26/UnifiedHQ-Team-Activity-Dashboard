'use client';

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Skeleton } from '@/components/ui/skeleton';
import { useToast } from '@/hooks/use-toast';
import {
  IconSparkles,
  IconRefresh,
  IconClock,
  IconCircleCheck,
  IconAlertCircle,
  IconLoader2,
  IconCalendar,
} from '@tabler/icons-react';

interface AISummary {
  id: string;
  title: string;
  keyHighlights: string[];
  actionItems: string[];
  insights: string[];
  generatedAt: string;
  timeRange: {
    start: string;
    end: string;
  };
  metadata: {
    activityCount: number;
    sourceBreakdown: Record<string, number>;
    model: string;
    tokensUsed: number;
  };
}

interface AISummaryCardProps {
  className?: string;
}

export function AISummaryCard({ className }: AISummaryCardProps) {
  const { toast } = useToast();
  const [summary, setSummary] = useState<AISummary | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isGenerating, setIsGenerating] = useState(false);
  const [timeRange, setTimeRange] = useState<'24h' | '7d' | '30d'>('24h');

  useEffect(() => {
    fetchSummary();
  }, [timeRange]);

  const fetchSummary = async () => {
    try {
      setIsLoading(true);
      const response = await fetch(
        `/api/ai-summary?timeRange=${timeRange}&limit=1`
      );

      if (!response.ok) {
        throw new Error('Failed to fetch summary');
      }

      const data = await response.json();
      if (data.summaries && data.summaries.length > 0) {
        setSummary(data.summaries[0]);

        // Show toast if summary was auto-generated
        if (data.autoGenerated) {
          toast({
            title: 'Daily AI Summary Generated',
            description: 'Your 24-hour summary has been automatically created!',
          });
        }
      } else {
        setSummary(null);
      }
    } catch (error) {
      console.error('Error fetching AI summary:', error);
      toast({
        title: 'Error',
        description: 'Failed to load AI summary',
        variant: 'destructive',
      });
    } finally {
      setIsLoading(false);
    }
  };

  const generateNewSummary = async () => {
    try {
      setIsGenerating(true);
      const response = await fetch('/api/ai-summary', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          timeRange,
          forceRegenerate: true,
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to generate summary');
      }

      const data = await response.json();
      setSummary(data.summary);

      toast({
        title: 'Success',
        description: 'AI summary generated successfully',
      });
    } catch (error) {
      console.error('Error generating AI summary:', error);
      toast({
        title: 'Error',
        description:
          error instanceof Error ? error.message : 'Failed to generate summary',
        variant: 'destructive',
      });
    } finally {
      setIsGenerating(false);
    }
  };

  const formatTimeRange = (range: string) => {
    switch (range) {
      case '24h':
        return 'Today';
      case '7d':
        return 'This Week';
      case '30d':
        return 'This Month';
      default:
        return 'Today';
    }
  };

  const formatTimestamp = (timestamp: string) => {
    const date = new Date(timestamp);
    return date.toLocaleTimeString('en-US', {
      hour: 'numeric',
      minute: '2-digit',
      hour12: true,
    });
  };

  if (isLoading) {
    return (
      <Card className={className}>
        <CardHeader className='pb-3'>
          <div className='flex items-center justify-between'>
            <div className='flex items-center gap-2'>
              <IconSparkles className='size-5 text-white' />
              <h3 className='text-lg font-semibold text-white'>
                AI Daily Summary
              </h3>
            </div>
            <Skeleton className='h-6 w-16' />
          </div>
          <p className='text-sm text-gray-400'>
            Intelligent insights from your team's activity
          </p>
        </CardHeader>
        <CardContent className='space-y-4'>
          <div>
            <Skeleton className='h-5 w-24 mb-2' />
            <div className='space-y-2'>
              {[1, 2, 3, 4].map(i => (
                <Skeleton key={i} className='h-4 w-full' />
              ))}
            </div>
          </div>
          <div>
            <Skeleton className='h-5 w-20 mb-2' />
            <div className='space-y-2'>
              {[1, 2].map(i => (
                <Skeleton key={i} className='h-4 w-full' />
              ))}
            </div>
          </div>
          <Skeleton className='h-4 w-48' />
        </CardContent>
      </Card>
    );
  }

  if (!summary) {
    return (
      <Card className={className}>
        <CardHeader className='pb-3'>
          <div className='flex items-center justify-between'>
            <div className='flex items-center gap-2'>
              <IconSparkles className='size-5 text-white' />
              <h3 className='text-lg font-semibold text-white'>
                AI Daily Summary
              </h3>
            </div>
            <div className='flex items-center gap-2'>
              <select
                value={timeRange}
                onChange={e =>
                  setTimeRange(e.target.value as '24h' | '7d' | '30d')
                }
                className='bg-slate-800 text-white text-xs px-2 py-1 rounded border border-slate-600'
              >
                <option value='24h'>Today</option>
                <option value='7d'>This Week</option>
                <option value='30d'>This Month</option>
              </select>
            </div>
          </div>
          <p className='text-sm text-gray-400'>
            Intelligent insights from your team's activity
          </p>
        </CardHeader>
        <CardContent>
          <div className='text-center py-8'>
            <IconSparkles className='size-12 text-gray-500 mx-auto mb-4' />
            <h4 className='text-lg font-medium text-white mb-2'>
              No Summary Available
            </h4>
            <p className='text-gray-400 mb-4'>
              No activities found for {formatTimeRange(timeRange).toLowerCase()}
              . Connect your integrations to start generating AI summaries.
            </p>
            <Button
              onClick={generateNewSummary}
              disabled={isGenerating}
              className='bg-blue-600 hover:bg-blue-700'
            >
              {isGenerating ? (
                <IconLoader2 className='size-4 mr-2 animate-spin' />
              ) : (
                <IconSparkles className='size-4 mr-2' />
              )}
              Generate Summary
            </Button>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className={className}>
      <CardHeader className='pb-3'>
        <div className='flex items-center justify-between'>
          <div className='flex items-center gap-2'>
            <IconSparkles className='size-5 text-white' />
            <h3 className='text-lg font-semibold text-white'>
              AI Daily Summary
            </h3>
          </div>
          <div className='flex items-center gap-2'>
            <select
              value={timeRange}
              onChange={e =>
                setTimeRange(e.target.value as '24h' | '7d' | '30d')
              }
              className='bg-slate-800 text-white text-xs px-2 py-1 rounded border border-slate-600'
            >
              <option value='24h'>Today</option>
              <option value='7d'>This Week</option>
              <option value='30d'>This Month</option>
            </select>
            <Button
              size='sm'
              variant='ghost'
              onClick={generateNewSummary}
              disabled={isGenerating}
              className='text-gray-400 hover:text-white hover:bg-slate-800'
            >
              {isGenerating ? (
                <IconLoader2 className='size-4 animate-spin' />
              ) : (
                <IconRefresh className='size-4' />
              )}
            </Button>
          </div>
        </div>
        <p className='text-sm text-gray-400'>
          Intelligent insights from your team's activity
        </p>
      </CardHeader>

      <CardContent className='space-y-6'>
        {/* Key Highlights */}
        <div>
          <h4 className='text-white font-semibold mb-3 flex items-center gap-2'>
            <IconCircleCheck className='size-4 text-blue-400' />
            Key Highlights
          </h4>
          <ul className='space-y-2'>
            {summary.keyHighlights.map((highlight, index) => (
              <li key={index} className='flex items-start gap-3'>
                <div className='w-2 h-2 bg-blue-400 rounded-full mt-2 flex-shrink-0' />
                <span className='text-gray-300 text-sm leading-relaxed'>
                  {highlight}
                </span>
              </li>
            ))}
          </ul>
        </div>

        {/* Action Items */}
        <div>
          <h4 className='text-white font-semibold mb-3 flex items-center gap-2'>
            <IconAlertCircle className='size-4 text-orange-400' />
            Action Items
          </h4>
          <ul className='space-y-2'>
            {summary.actionItems.map((item, index) => (
              <li key={index} className='flex items-start gap-3'>
                <div className='w-2 h-2 bg-orange-400 rounded-full mt-2 flex-shrink-0' />
                <span className='text-gray-300 text-sm leading-relaxed'>
                  {item}
                </span>
              </li>
            ))}
          </ul>
        </div>

        {/* Additional Insights */}
        {summary.insights && summary.insights.length > 0 && (
          <div>
            <h4 className='text-white font-semibold mb-3 flex items-center gap-2'>
              <IconCalendar className='size-4 text-green-400' />
              Additional Insights
            </h4>
            <ul className='space-y-2'>
              {summary.insights.map((insight, index) => (
                <li key={index} className='flex items-start gap-3'>
                  <div className='w-2 h-2 bg-green-400 rounded-full mt-2 flex-shrink-0' />
                  <span className='text-gray-300 text-sm leading-relaxed'>
                    {insight}
                  </span>
                </li>
              ))}
            </ul>
          </div>
        )}

        {/* Footer */}
        <div className='pt-4 border-t border-slate-700'>
          <div className='flex items-center justify-between text-xs text-gray-500'>
            <div className='flex items-center gap-4'>
              <span className='flex items-center gap-1'>
                <IconClock className='size-3' />
                Summary generated at {formatTimestamp(summary.generatedAt)}
              </span>
              <span>•</span>
              <span>Daily summaries every 24 hours</span>
            </div>
            <div className='flex items-center gap-2'>
              <Badge variant='secondary' className='text-xs'>
                {summary.metadata.activityCount} activities
              </Badge>
              <Badge variant='outline' className='text-xs'>
                {summary.metadata.model.split('/')[1]}
              </Badge>
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}
