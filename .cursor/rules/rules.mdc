---
alwaysApply: true
---

# Project Rules & Guidelines

This document outlines the comprehensive rules and guidelines for this project. All developers must follow these rules to maintain code quality, consistency, and project standards.

## üöÄ Package Manager Rules

### Always Use Bun
- **NEVER** use `npm` or `yarn` for package management
- **ALWAYS** use `bun` for all package operations:
  - `bun install` instead of `npm install`
  - `bun add <package>` instead of `npm install <package>`
  - `bun run <script>` instead of `npm run <script>`
  - `bun remove <package>` instead of `npm uninstall <package>`

### Bun Commands
```bash
# Install dependencies
bun install

# Add new package
bun add <package-name>

# Add dev dependency
bun add -d <package-name>

# Run scripts
bun run dev
bun run build
bun run test

# Remove package
bun remove <package-name>

# Update packages
bun update
```

## üéØ TypeScript Rules

### Never Use `any` Type
- **NEVER** use `any` type in TypeScript code
- **ALWAYS** use proper type definitions
- **ALWAYS** use `unknown` instead of `any` when type is truly unknown
- **ALWAYS** create proper interfaces and types

### Type Safety Examples
```typescript
// ‚ùå WRONG - Never use any
const data: any = fetchData();

// ‚úÖ CORRECT - Use proper types
interface ApiResponse {
  data: unknown[];
  status: number;
}
const data: ApiResponse = fetchData();

// ‚úÖ CORRECT - Use unknown when type is unknown
const unknownData: unknown = fetchData();
if (typeof unknownData === 'object' && unknownData !== null) {
  // Type guard to narrow the type
}

// ‚úÖ CORRECT - Create proper interfaces
interface User {
  id: string;
  name: string;
  email: string;
}
const user: User = getUser();
```

### TypeScript Best Practices
- **Always define return types** for functions
- **Use strict mode** in TypeScript configuration
- **Prefer interfaces over types** for object shapes
- **Use enums** for constants
- **Use generics** for reusable components
- **Use type guards** for runtime type checking

## üé® UI/UX Rules

### Always Use OptimizedImage Instead of Standard Images
- **NEVER** use standard `<img>` tags or Next.js `<Image>` directly
- **ALWAYS** use `<OptimizedImage>` component for all images
- **ALWAYS** use `<AvatarImage>` component for profile pictures and avatars
- **ALWAYS** use `<ImageGallery>` component for image collections

### Quality Levels
- **Hero images** (above-the-fold): Use `quality="hero"` (90%)
- **Card images** (content): Use `quality="card"` (80%)
- **Thumbnails** (small images): Use `quality="thumbnail"` (70%)
- **Avatars** (profile pictures): Use `quality="avatar"` (75%)
- **Custom quality**: Use numeric values (1-100) when needed

### Image Component Examples
```tsx
// ‚úÖ CORRECT - Use OptimizedImage
import { OptimizedImage } from '@/components/optimized-image';

<OptimizedImage
  src='/path/to/image.jpg'
  alt='Descriptive alt text'
  width={800}
  height={600}
  quality='card'
  priority={false}
  className='rounded-lg'
/>;

// ‚úÖ CORRECT - Use AvatarImage
import { AvatarImage } from '@/components/avatar-image';

<AvatarImage
  src='/path/to/avatar.jpg'
  alt='User avatar'
  size='lg'
  fallback='/default-avatar.jpg'
/>;
```

## üîÑ GitHub Integration Rules

### Always Use Cached GitHub Integration
- **NEVER** use `@/lib/integrations/github` directly
- **ALWAYS** use `@/lib/integrations/github-cached` for all GitHub operations
- **ALWAYS** use `CachedGitHubClient` instead of raw Octokit calls
- **ALWAYS** use `fetchGithubActivity` from cached module

### GitHub Code Examples
```tsx
// ‚úÖ CORRECT - Use cached version
import { fetchGithubActivity } from '@/lib/integrations/github-cached';

const activities = await fetchGithubActivity(userId);

// ‚ùå WRONG - Don't use non-cached version
import { fetchGithubActivity } from '@/lib/integrations/github';
```

### Cache Management
```tsx
// ‚úÖ CORRECT - Use cache manager
import { GitHubCacheManager } from '@/lib/integrations/github-cached';

// Get cache statistics
const stats = GitHubCacheManager.getStats();

// Clear user cache
await GitHubCacheManager.clearUserCache(userId);
```

## üîÑ Retry Mechanism Rules

### Always Use Retry Mechanisms for Failed Requests
- **ALWAYS** use `withRetry` utility for API calls
- **ALWAYS** use appropriate retry presets
- **ALWAYS** handle retry errors gracefully
- **ALWAYS** use `useRetry` hook in React components

### Retry Configuration
```typescript
// ‚úÖ CORRECT - Use retry mechanisms
import { withRetry, RetryPresets } from '@/lib/retry-utils';

const result = await withRetry(
  async () => {
    return await apiCall();
  },
  {
    ...RetryPresets.standard,
    onRetry: (error, attempt, delay) => {
      console.warn(`Retry attempt ${attempt}:`, error.message);
    },
  }
);
```

### Retry Presets
- **quick**: Fast retries for UI interactions
- **standard**: Default retry configuration
- **aggressive**: More retries for critical operations
- **github**: Optimized for GitHub API
- **openrouter**: Optimized for OpenRouter API

## üéØ PostHog Rules

### Always Use Client-Side PostHog Utilities
- **NEVER** import `posthog-node` in client components
- **ALWAYS** use `@/lib/posthog-client` for client-side operations
- **ALWAYS** use `captureClientError` for error tracking
- **ALWAYS** use `captureClientEvent` for event tracking

### PostHog Code Examples
```typescript
// ‚úÖ CORRECT - Use client utilities
import { captureClientError, captureClientEvent } from '@/lib/posthog-client';

// Capture errors
captureClientError(error, {
  context: 'user_action',
  timestamp: new Date().toISOString(),
});

// Capture events
captureClientEvent('button_clicked', {
  button_name: 'submit',
  page: 'dashboard',
});
```

## üö® Error Handling Rules

### Always Use Error Boundaries
- **ALWAYS** wrap components with error boundaries
- **ALWAYS** use `DashboardErrorBoundary` for dashboard components
- **ALWAYS** provide fallback UI for errors
- **ALWAYS** log errors with proper context

### Error Handling Examples
```tsx
// ‚úÖ CORRECT - Use error boundaries
import { DashboardErrorBoundary } from '@/components/error-boundaries';

<DashboardErrorBoundary>
  <YourComponent />
</DashboardErrorBoundary>
```

### API Error Handling
- **ALWAYS** use `withErrorHandling` wrapper for API routes
- **ALWAYS** return standardized error responses
- **ALWAYS** include request IDs for debugging
- **ALWAYS** log errors with proper context

## üé® Styling Rules

### Always Use Tailwind CSS
- **NEVER** use inline styles or CSS modules
- **ALWAYS** use Tailwind utility classes
- **ALWAYS** use consistent spacing and sizing
- **ALWAYS** use dark mode classes

### Styling Examples
```tsx
// ‚úÖ CORRECT - Use Tailwind classes
<div className="bg-slate-800 border-slate-700 rounded-lg p-4">
  <h2 className="text-white text-xl font-bold mb-2">
    Title
  </h2>
  <p className="text-gray-400 text-sm">
    Description
  </p>
</div>
```

### Color Scheme
- **Background**: `bg-slate-800`, `bg-slate-900`
- **Borders**: `border-slate-700`, `border-slate-600`
- **Text**: `text-white`, `text-gray-300`, `text-gray-400`
- **Accents**: `text-blue-400`, `text-green-400`, `text-red-400`

## üîß Component Rules

### Always Use Shadcn/ui Components
- **ALWAYS** use components from `@/components/ui/`
- **ALWAYS** follow component patterns
- **ALWAYS** use proper props and variants
- **ALWAYS** maintain accessibility standards

### Component Examples
```tsx
// ‚úÖ CORRECT - Use shadcn/ui components
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';

<Card className="bg-slate-800 border-slate-700">
  <CardHeader>
    <CardTitle className="text-white">Title</CardTitle>
  </CardHeader>
  <CardContent>
    <Button variant="outline" className="border-blue-500/30 text-blue-400">
      Action
    </Button>
  </CardContent>
</Card>
```

## üìÅ File Organization Rules

### Always Follow Consistent File Structure
- **ALWAYS** use `src/` directory for source code
- **ALWAYS** use `@/` alias for imports
- **ALWAYS** organize components by feature
- **ALWAYS** use descriptive file names

### Import Organization
```typescript
// ‚úÖ CORRECT - Organized imports
// 1. React imports
import React, { useState, useEffect } from 'react';

// 2. Next.js imports
import { NextRequest, NextResponse } from 'next/server';

// 3. Third-party imports
import { IconBug, IconCheck } from '@tabler/icons-react';

// 4. Internal imports (components)
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';

// 5. Internal imports (utilities)
import { withRetry } from '@/lib/retry-utils';
import { captureClientError } from '@/lib/posthog-client';

// 6. Type imports
import type { User } from '@/types/user';
```

## üß™ Testing Rules

### Always Write Tests for New Features
- **ALWAYS** write unit tests for utilities
- **ALWAYS** write integration tests for API routes
- **ALWAYS** write component tests for UI components
- **ALWAYS** use proper test descriptions

### Testing Examples
```typescript
// ‚úÖ CORRECT - Test structure
describe('RetryUtils', () => {
  it('should retry failed requests with exponential backoff', async () => {
    const mockFn = jest.fn().mockRejectedValue(new Error('Test error'));
    
    await expect(withRetry(mockFn, RetryPresets.quick)).rejects.toThrow('Test error');
    expect(mockFn).toHaveBeenCalledTimes(3); // 1 initial + 2 retries
  });
});
```

## üîí Security Rules

### Always Validate Input
- **ALWAYS** validate user input on both client and server
- **ALWAYS** sanitize data before processing
- **ALWAYS** use proper authentication checks
- **ALWAYS** follow OWASP guidelines

### Security Examples
```typescript
// ‚úÖ CORRECT - Input validation
import { z } from 'zod';

const userSchema = z.object({
  email: z.string().email(),
  name: z.string().min(1).max(100),
});

const validatedData = userSchema.parse(userInput);
```

## üìä Performance Rules

### Always Optimize for Performance
- **ALWAYS** use React.memo for expensive components
- **ALWAYS** use useMemo and useCallback appropriately
- **ALWAYS** implement proper loading states
- **ALWAYS** use lazy loading for non-critical components

### Performance Examples
```tsx
// ‚úÖ CORRECT - Optimized component
const ExpensiveComponent = React.memo(({ data }: { data: Data[] }) => {
  const processedData = useMemo(() => {
    return data.map(item => processItem(item));
  }, [data]);

  return <div>{processedData.map(item => <Item key={item.id} data={item} />)}</div>;
});
```

## üåê API Rules

### Always Use Consistent API Patterns
- **ALWAYS** use RESTful API design
- **ALWAYS** return consistent response formats
- **ALWAYS** include proper HTTP status codes
- **ALWAYS** handle errors gracefully

### API Response Format
```typescript
// ‚úÖ CORRECT - Consistent API response
interface ApiResponse<T> {
  data: T;
  success: boolean;
  message?: string;
  timestamp: string;
}

// Success response
return NextResponse.json({
  data: result,
  success: true,
  timestamp: new Date().toISOString(),
});

// Error response
return NextResponse.json({
  data: null,
  success: false,
  message: 'Error description',
  timestamp: new Date().toISOString(),
}, { status: 400 });
```

## üéØ Feature Flag Rules

### Always Use Feature Flags Properly
- **ALWAYS** use enums for flag names
- **ALWAYS** check flag validity before use
- **ALWAYS** provide fallbacks for disabled features
- **ALWAYS** document flag usage

### Feature Flag Examples
```typescript
// ‚úÖ CORRECT - Feature flag usage
enum FeatureFlags {
  NEW_DASHBOARD = 'new_dashboard',
  ADVANCED_ANALYTICS = 'advanced_analytics',
}

const isNewDashboardEnabled = checkFeatureFlag(FeatureFlags.NEW_DASHBOARD);
if (isNewDashboardEnabled) {
  return <NewDashboard />;
}
return <LegacyDashboard />;
```

## üìù Documentation Rules

### Always Document Code
- **ALWAYS** write JSDoc comments for functions
- **ALWAYS** document complex logic
- **ALWAYS** update README files
- **ALWAYS** maintain API documentation

### Documentation Examples
```typescript
/**
 * Captures a client-side error with PostHog
 * @param error - The error to capture
 * @param properties - Additional properties to include
 * @returns void
 */
export function captureClientError(error: Error, properties?: Record<string, unknown>): void {
  // Implementation
}
```

## üöÄ Deployment Rules

### Always Follow Deployment Best Practices
- **ALWAYS** test in staging before production
- **ALWAYS** use environment variables for configuration
- **ALWAYS** monitor application health
- **ALWAYS** have rollback plans

## üîç Code Review Rules

### Always Review Code Thoroughly
- **ALWAYS** check for rule compliance
- **ALWAYS** verify type safety
- **ALWAYS** test functionality
- **ALWAYS** check performance impact

## üìã Checklist for New Features

Before implementing any new feature, ensure:

- [ ] Using Bun for package management
- [ ] No `any` types used
- [ ] Proper TypeScript interfaces defined
- [ ] Using OptimizedImage for images
- [ ] Using cached GitHub integration
- [ ] Implementing retry mechanisms
- [ ] Using client-side PostHog utilities
- [ ] Error boundaries implemented
- [ ] Tailwind CSS for styling
- [ ] Shadcn/ui components used
- [ ] Proper file organization
- [ ] Tests written
- [ ] Security considerations addressed
- [ ] Performance optimized
- [ ] API patterns followed
- [ ] Feature flags used if needed
- [ ] Documentation updated

## üö® Violation Consequences

Violations of these rules will result in:
1. **Code review rejection**
2. **Required refactoring**
3. **Documentation updates**
4. **Team discussion for clarification**

## üìû Questions and Clarifications

If you have questions about any of these rules:
1. Check existing code examples
2. Ask team members
3. Create an issue for clarification
4. Update this document if needed

---

**Remember**: These rules exist to maintain code quality, consistency, and project standards. Following them makes the codebase more maintainable, performant, and easier to work with for all team members.
# Project Rules & Guidelines

This document outlines the comprehensive rules and guidelines for this project. All developers must follow these rules to maintain code quality, consistency, and project standards.

## üöÄ Package Manager Rules

### Always Use Bun
- **NEVER** use `npm` or `yarn` for package management
- **ALWAYS** use `bun` for all package operations:
  - `bun install` instead of `npm install`
  - `bun add <package>` instead of `npm install <package>`
  - `bun run <script>` instead of `npm run <script>`
  - `bun remove <package>` instead of `npm uninstall <package>`

### Bun Commands
```bash
# Install dependencies
bun install

# Add new package
bun add <package-name>

# Add dev dependency
bun add -d <package-name>

# Run scripts
bun run dev
bun run build
bun run test

# Remove package
bun remove <package-name>

# Update packages
bun update
```

## üéØ TypeScript Rules

### Never Use `any` Type
- **NEVER** use `any` type in TypeScript code
- **ALWAYS** use proper type definitions
- **ALWAYS** use `unknown` instead of `any` when type is truly unknown
- **ALWAYS** create proper interfaces and types

### Type Safety Examples
```typescript
// ‚ùå WRONG - Never use any
const data: any = fetchData();

// ‚úÖ CORRECT - Use proper types
interface ApiResponse {
  data: unknown[];
  status: number;
}
const data: ApiResponse = fetchData();

// ‚úÖ CORRECT - Use unknown when type is unknown
const unknownData: unknown = fetchData();
if (typeof unknownData === 'object' && unknownData !== null) {
  // Type guard to narrow the type
}

// ‚úÖ CORRECT - Create proper interfaces
interface User {
  id: string;
  name: string;
  email: string;
}
const user: User = getUser();
```

### TypeScript Best Practices
- **Always define return types** for functions
- **Use strict mode** in TypeScript configuration
- **Prefer interfaces over types** for object shapes
- **Use enums** for constants
- **Use generics** for reusable components
- **Use type guards** for runtime type checking

## üé® UI/UX Rules

### Always Use OptimizedImage Instead of Standard Images
- **NEVER** use standard `<img>` tags or Next.js `<Image>` directly
- **ALWAYS** use `<OptimizedImage>` component for all images
- **ALWAYS** use `<AvatarImage>` component for profile pictures and avatars
- **ALWAYS** use `<ImageGallery>` component for image collections

### Quality Levels
- **Hero images** (above-the-fold): Use `quality="hero"` (90%)
- **Card images** (content): Use `quality="card"` (80%)
- **Thumbnails** (small images): Use `quality="thumbnail"` (70%)
- **Avatars** (profile pictures): Use `quality="avatar"` (75%)
- **Custom quality**: Use numeric values (1-100) when needed

### Image Component Examples
```tsx
// ‚úÖ CORRECT - Use OptimizedImage
import { OptimizedImage } from '@/components/optimized-image';

<OptimizedImage
  src='/path/to/image.jpg'
  alt='Descriptive alt text'
  width={800}
  height={600}
  quality='card'
  priority={false}
  className='rounded-lg'
/>;

// ‚úÖ CORRECT - Use AvatarImage
import { AvatarImage } from '@/components/avatar-image';

<AvatarImage
  src='/path/to/avatar.jpg'
  alt='User avatar'
  size='lg'
  fallback='/default-avatar.jpg'
/>;
```

## üîÑ GitHub Integration Rules

### Always Use Cached GitHub Integration
- **NEVER** use `@/lib/integrations/github` directly
- **ALWAYS** use `@/lib/integrations/github-cached` for all GitHub operations
- **ALWAYS** use `CachedGitHubClient` instead of raw Octokit calls
- **ALWAYS** use `fetchGithubActivity` from cached module

### GitHub Code Examples
```tsx
// ‚úÖ CORRECT - Use cached version
import { fetchGithubActivity } from '@/lib/integrations/github-cached';

const activities = await fetchGithubActivity(userId);

// ‚ùå WRONG - Don't use non-cached version
import { fetchGithubActivity } from '@/lib/integrations/github';
```

### Cache Management
```tsx
// ‚úÖ CORRECT - Use cache manager
import { GitHubCacheManager } from '@/lib/integrations/github-cached';

// Get cache statistics
const stats = GitHubCacheManager.getStats();

// Clear user cache
await GitHubCacheManager.clearUserCache(userId);
```

## üîÑ Retry Mechanism Rules

### Always Use Retry Mechanisms for Failed Requests
- **ALWAYS** use `withRetry` utility for API calls
- **ALWAYS** use appropriate retry presets
- **ALWAYS** handle retry errors gracefully
- **ALWAYS** use `useRetry` hook in React components

### Retry Configuration
```typescript
// ‚úÖ CORRECT - Use retry mechanisms
import { withRetry, RetryPresets } from '@/lib/retry-utils';

const result = await withRetry(
  async () => {
    return await apiCall();
  },
  {
    ...RetryPresets.standard,
    onRetry: (error, attempt, delay) => {
      console.warn(`Retry attempt ${attempt}:`, error.message);
    },
  }
);
```

### Retry Presets
- **quick**: Fast retries for UI interactions
- **standard**: Default retry configuration
- **aggressive**: More retries for critical operations
- **github**: Optimized for GitHub API
- **openrouter**: Optimized for OpenRouter API

## üéØ PostHog Rules

### Always Use Client-Side PostHog Utilities
- **NEVER** import `posthog-node` in client components
- **ALWAYS** use `@/lib/posthog-client` for client-side operations
- **ALWAYS** use `captureClientError` for error tracking
- **ALWAYS** use `captureClientEvent` for event tracking

### PostHog Code Examples
```typescript
// ‚úÖ CORRECT - Use client utilities
import { captureClientError, captureClientEvent } from '@/lib/posthog-client';

// Capture errors
captureClientError(error, {
  context: 'user_action',
  timestamp: new Date().toISOString(),
});

// Capture events
captureClientEvent('button_clicked', {
  button_name: 'submit',
  page: 'dashboard',
});
```

## üö® Error Handling Rules

### Always Use Error Boundaries
- **ALWAYS** wrap components with error boundaries
- **ALWAYS** use `DashboardErrorBoundary` for dashboard components
- **ALWAYS** provide fallback UI for errors
- **ALWAYS** log errors with proper context

### Error Handling Examples
```tsx
// ‚úÖ CORRECT - Use error boundaries
import { DashboardErrorBoundary } from '@/components/error-boundaries';

<DashboardErrorBoundary>
  <YourComponent />
</DashboardErrorBoundary>
```

### API Error Handling
- **ALWAYS** use `withErrorHandling` wrapper for API routes
- **ALWAYS** return standardized error responses
- **ALWAYS** include request IDs for debugging
- **ALWAYS** log errors with proper context

## üé® Styling Rules

### Always Use Tailwind CSS
- **NEVER** use inline styles or CSS modules
- **ALWAYS** use Tailwind utility classes
- **ALWAYS** use consistent spacing and sizing
- **ALWAYS** use dark mode classes

### Styling Examples
```tsx
// ‚úÖ CORRECT - Use Tailwind classes
<div className="bg-slate-800 border-slate-700 rounded-lg p-4">
  <h2 className="text-white text-xl font-bold mb-2">
    Title
  </h2>
  <p className="text-gray-400 text-sm">
    Description
  </p>
</div>
```

### Color Scheme
- **Background**: `bg-slate-800`, `bg-slate-900`
- **Borders**: `border-slate-700`, `border-slate-600`
- **Text**: `text-white`, `text-gray-300`, `text-gray-400`
- **Accents**: `text-blue-400`, `text-green-400`, `text-red-400`

## üîß Component Rules

### Always Use Shadcn/ui Components
- **ALWAYS** use components from `@/components/ui/`
- **ALWAYS** follow component patterns
- **ALWAYS** use proper props and variants
- **ALWAYS** maintain accessibility standards

### Component Examples
```tsx
// ‚úÖ CORRECT - Use shadcn/ui components
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';

<Card className="bg-slate-800 border-slate-700">
  <CardHeader>
    <CardTitle className="text-white">Title</CardTitle>
  </CardHeader>
  <CardContent>
    <Button variant="outline" className="border-blue-500/30 text-blue-400">
      Action
    </Button>
  </CardContent>
</Card>
```

## üìÅ File Organization Rules

### Always Follow Consistent File Structure
- **ALWAYS** use `src/` directory for source code
- **ALWAYS** use `@/` alias for imports
- **ALWAYS** organize components by feature
- **ALWAYS** use descriptive file names

### Import Organization
```typescript
// ‚úÖ CORRECT - Organized imports
// 1. React imports
import React, { useState, useEffect } from 'react';

// 2. Next.js imports
import { NextRequest, NextResponse } from 'next/server';

// 3. Third-party imports
import { IconBug, IconCheck } from '@tabler/icons-react';

// 4. Internal imports (components)
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';

// 5. Internal imports (utilities)
import { withRetry } from '@/lib/retry-utils';
import { captureClientError } from '@/lib/posthog-client';

// 6. Type imports
import type { User } from '@/types/user';
```

## üß™ Testing Rules

### Always Write Tests for New Features
- **ALWAYS** write unit tests for utilities
- **ALWAYS** write integration tests for API routes
- **ALWAYS** write component tests for UI components
- **ALWAYS** use proper test descriptions

### Testing Examples
```typescript
// ‚úÖ CORRECT - Test structure
describe('RetryUtils', () => {
  it('should retry failed requests with exponential backoff', async () => {
    const mockFn = jest.fn().mockRejectedValue(new Error('Test error'));
    
    await expect(withRetry(mockFn, RetryPresets.quick)).rejects.toThrow('Test error');
    expect(mockFn).toHaveBeenCalledTimes(3); // 1 initial + 2 retries
  });
});
```

## üîí Security Rules

### Always Validate Input
- **ALWAYS** validate user input on both client and server
- **ALWAYS** sanitize data before processing
- **ALWAYS** use proper authentication checks
- **ALWAYS** follow OWASP guidelines

### Security Examples
```typescript
// ‚úÖ CORRECT - Input validation
import { z } from 'zod';

const userSchema = z.object({
  email: z.string().email(),
  name: z.string().min(1).max(100),
});

const validatedData = userSchema.parse(userInput);
```

## üìä Performance Rules

### Always Optimize for Performance
- **ALWAYS** use React.memo for expensive components
- **ALWAYS** use useMemo and useCallback appropriately
- **ALWAYS** implement proper loading states
- **ALWAYS** use lazy loading for non-critical components

### Performance Examples
```tsx
// ‚úÖ CORRECT - Optimized component
const ExpensiveComponent = React.memo(({ data }: { data: Data[] }) => {
  const processedData = useMemo(() => {
    return data.map(item => processItem(item));
  }, [data]);

  return <div>{processedData.map(item => <Item key={item.id} data={item} />)}</div>;
});
```

## üåê API Rules

### Always Use Consistent API Patterns
- **ALWAYS** use RESTful API design
- **ALWAYS** return consistent response formats
- **ALWAYS** include proper HTTP status codes
- **ALWAYS** handle errors gracefully

### API Response Format
```typescript
// ‚úÖ CORRECT - Consistent API response
interface ApiResponse<T> {
  data: T;
  success: boolean;
  message?: string;
  timestamp: string;
}

// Success response
return NextResponse.json({
  data: result,
  success: true,
  timestamp: new Date().toISOString(),
});

// Error response
return NextResponse.json({
  data: null,
  success: false,
  message: 'Error description',
  timestamp: new Date().toISOString(),
}, { status: 400 });
```

## üéØ Feature Flag Rules

### Always Use Feature Flags Properly
- **ALWAYS** use enums for flag names
- **ALWAYS** check flag validity before use
- **ALWAYS** provide fallbacks for disabled features
- **ALWAYS** document flag usage

### Feature Flag Examples
```typescript
// ‚úÖ CORRECT - Feature flag usage
enum FeatureFlags {
  NEW_DASHBOARD = 'new_dashboard',
  ADVANCED_ANALYTICS = 'advanced_analytics',
}

const isNewDashboardEnabled = checkFeatureFlag(FeatureFlags.NEW_DASHBOARD);
if (isNewDashboardEnabled) {
  return <NewDashboard />;
}
return <LegacyDashboard />;
```

## üìù Documentation Rules

### Always Document Code
- **ALWAYS** write JSDoc comments for functions
- **ALWAYS** document complex logic
- **ALWAYS** update README files
- **ALWAYS** maintain API documentation

### Documentation Examples
```typescript
/**
 * Captures a client-side error with PostHog
 * @param error - The error to capture
 * @param properties - Additional properties to include
 * @returns void
 */
export function captureClientError(error: Error, properties?: Record<string, unknown>): void {
  // Implementation
}
```

## üöÄ Deployment Rules

### Always Follow Deployment Best Practices
- **ALWAYS** test in staging before production
- **ALWAYS** use environment variables for configuration
- **ALWAYS** monitor application health
- **ALWAYS** have rollback plans

## üîç Code Review Rules

### Always Review Code Thoroughly
- **ALWAYS** check for rule compliance
- **ALWAYS** verify type safety
- **ALWAYS** test functionality
- **ALWAYS** check performance impact

## üìã Checklist for New Features

Before implementing any new feature, ensure:

- [ ] Using Bun for package management
- [ ] No `any` types used
- [ ] Proper TypeScript interfaces defined
- [ ] Using OptimizedImage for images
- [ ] Using cached GitHub integration
- [ ] Implementing retry mechanisms
- [ ] Using client-side PostHog utilities
- [ ] Error boundaries implemented
- [ ] Tailwind CSS for styling
- [ ] Shadcn/ui components used
- [ ] Proper file organization
- [ ] Tests written
- [ ] Security considerations addressed
- [ ] Performance optimized
- [ ] API patterns followed
- [ ] Feature flags used if needed
- [ ] Documentation updated

## üö® Violation Consequences

Violations of these rules will result in:
1. **Code review rejection**
2. **Required refactoring**
3. **Documentation updates**
4. **Team discussion for clarification**

## üìû Questions and Clarifications

If you have questions about any of these rules:
1. Check existing code examples
2. Ask team members
3. Create an issue for clarification
4. Update this document if needed

---

**Remember**: These rules exist to maintain code quality, consistency, and project standards. Following them makes the codebase more maintainable, performant, and easier to work with for all team members.
